import { type NextPage } from "next";
import Head from "next/head";
import { api } from "@/utils/api";
import { FormEvent, useState } from "react";
import Header from "@/components/Header";
import { useAutoAnimate } from "@formkit/auto-animate/react";

const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>Tasketeer</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Header />
        <div className="m-auto w-3/4">
          <TaskForm />
          <div className="card">
            <div className="card-body">
              <div className="grid grid-cols-1 lg:grid-cols-2">
                <div>
                  <h2 className="font-bold">Tasks</h2>
                  <TaskList state="non-completed" />
                </div>
                <div>
                  <h2 className="font-bold">Completed</h2>

                  <TaskList state="completed" />
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;

const TaskForm: React.FC = () => {
  const utils = api.useContext();
  const [title, setTitle] = useState("");

  const createTaskMutation = api.task.create.useMutation({
    onSuccess() {
      utils.task.index.invalidate();
    },
  });

  const handleSubmit = (e: FormEvent) => {
    e.preventDefault();
    createTaskMutation.mutate({
      title,
    });

    setTitle("");
  };

  return (
    <div className="card">
      <div className="card-body">
        <form onSubmit={handleSubmit} className="flex gap-4">
          <input
            type="text"
            placeholder="Enter task"
            className="input-bordered input-primary input w-full"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
          />

          <button
            className="btn-primary btn flex gap-2"
            disabled={title.length === 0}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth={1.5}
              stroke="currentColor"
              className="h-5 w-5"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M12 4.5v15m7.5-7.5h-15"
              />
            </svg>
            Create task
          </button>
        </form>
      </div>
    </div>
  );
};

type TaskListProps = {
  state: "completed" | "non-completed";
};
const TaskList: React.FC<TaskListProps> = (props: TaskListProps) => {
  const [parent, enableAnimations] = useAutoAnimate();
  const utils = api.useContext();
  const { data: tasks } = api.task.index.useQuery();
  const toggleCompletedMutation = api.task.toggleCompleted.useMutation({
    onSuccess() {
      utils.task.index.invalidate();
    },
  });

  const deleteMutation = api.task.delete.useMutation({
    onSuccess() {
      utils.task.index.invalidate();
    },
  });

  const handleToggleCompleted = (taskId: string) => {
    toggleCompletedMutation.mutate({ id: taskId });
  };

  const handleDelete = (taskId: string) => {
    deleteMutation.mutate({ id: taskId });
  };

  return (
    <ul ref={parent}>
      {tasks
        ?.filter((task) =>
          props.state === "completed" ? task.completed : !task.completed
        )
        .map((task) => (
          <li
            key={task.id}
            className="mb-2 w-96 rounded-md py-1 px-4 hover:bg-base-200"
          >
            <div className="flex items-center">
              <label className="label flex-1 cursor-pointer justify-start gap-4">
                <input
                  type="checkbox"
                  checked={task.completed}
                  onChange={() => handleToggleCompleted(task.id)}
                  className="checkbox-accent checkbox"
                />
                <span
                  className={`label-text text-2xl ${
                    task.completed ? "line-through" : ""
                  }`}
                >
                  {task.title}
                </span>
              </label>
              <button
                className="btn-small btn-ghost btn-square btn-sm btn ml-auto"
                onClick={() => handleDelete(task.id)}
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  strokeWidth={1.5}
                  stroke="currentColor"
                  className="h-6 w-6"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0"
                  />
                </svg>
              </button>
            </div>
          </li>
        ))}
    </ul>
  );
};
